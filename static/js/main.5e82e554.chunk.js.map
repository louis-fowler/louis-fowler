{"version":3,"sources":["components/HeaderComp/HeaderComp.jsx","components/FooterComp/FooterComp.jsx","components/LangCard/LangCard.jsx","components/ProjectCard/ProjectCard.jsx","components/MainContent/MainContent.jsx","App.jsx","serviceWorker.js","index.jsx","imgs/jfrestoration.png"],"names":["HeaderComp","className","id","href","FooterComp","LangCard","props","icon","title","ProjectCard","siteLink","src","img","alt","siteLinkEasy","MainContent","faHtml5","faCss3","faSass","faJsSquare","faNodeJs","faReact","faSquarespace","faShopify","jfImage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"oNAYeA,MAVf,WACE,OACE,4BAAQC,UAAU,aAAaC,GAAG,SAChC,uBAAGC,KAAK,qBACN,yDCMOC,MAVf,WACE,OACE,4BAAQH,UAAU,cAChB,uBAAGE,KAAK,UACN,qC,OCUOE,MAbf,SAAkBC,GAChB,OACE,yBAAKL,UAAU,iBACb,yBAAKA,UAAU,QACb,2BACE,kBAAC,IAAD,CAAiBM,KAAMD,EAAMC,SAGjC,4BAAKD,EAAME,SCMFC,MAff,SAAqBH,GACnB,OACE,yBAAKL,UAAU,oBACb,yBAAKA,UAAU,gBACb,uBAAGE,KAAMG,EAAMI,SAAUT,UAAU,gBACjC,yBAAKU,IAAKL,EAAMM,IAAKC,IAAKP,EAAMQ,iBAGpC,uBAAGX,KAAMG,EAAMI,UACb,wBAAIT,UAAU,eAAeK,EAAMQ,iB,uBC4C5BC,MAxCf,WACE,OACE,yBAAKd,UAAU,iBACb,yBAAKA,UAAU,kBACb,0FAEF,wBAAIA,UAAU,aAAd,iBACA,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAUM,KAAMS,IAASR,MAAM,WAC/B,kBAAC,EAAD,CAAUD,KAAMU,IAAQT,MAAM,SAC9B,kBAAC,EAAD,CAAUD,KAAMW,IAAQV,MAAM,SAC9B,kBAAC,EAAD,CAAUD,KAAMY,IAAYX,MAAM,eAClC,kBAAC,EAAD,CAAUD,KAAMa,IAAUZ,MAAM,YAChC,kBAAC,EAAD,CAAUD,KAAMc,IAASb,MAAM,YAC/B,kBAAC,EAAD,CAAUD,KAAMe,IAAed,MAAM,gBACrC,kBAAC,EAAD,CAAUD,KAAMgB,IAAWf,MAAM,aAEnC,wBAAIP,UAAU,aAAd,oBACA,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEW,IAAKY,IACLd,SAAS,mCACTI,aAAa,6BAGjB,yBAAKb,UAAU,oBACb,wBAAIA,UAAU,aAAd,YACA,sCACS,uBAAGE,KAAK,uBAAR,gBAGT,qCACS,IACP,uBAAGA,KAAK,kCAAR,8BChCKsB,MAVf,WACE,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,2C","file":"static/js/main.5e82e554.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction HeaderComp() {\n  return (\n    <header className=\"App-header\" id=\"toTop\">\n      <a href=\"louisfowler.co.nz\">\n        <h2>Louis Fowler - Web Dev</h2>\n      </a>\n    </header>\n  );\n}\n\nexport default HeaderComp;\n","import React from \"react\";\n\nfunction FooterComp() {\n  return (\n    <footer className=\"App-footer\">\n      <a href=\"#toTop\">\n        <p>top</p>\n      </a>\n    </footer>\n  );\n}\n\nexport default FooterComp;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction LangCard(props) {\n  return (\n    <div className=\"cardContainer\">\n      <div className=\"card\">\n        <i>\n          <FontAwesomeIcon icon={props.icon} />\n        </i>\n      </div>\n      <h3>{props.title}</h3>\n    </div>\n  );\n}\n\nexport default LangCard;\n","import React from \"react\";\n\nfunction ProjectCard(props) {\n  return (\n    <div className=\"proCardContainer\">\n      <div className=\"imgContainer\">\n        <a href={props.siteLink} className=\"imgContainer\">\n          <img src={props.img} alt={props.siteLinkEasy} />\n        </a>\n      </div>\n      <a href={props.siteLink}>\n        <h2 className=\"projectLink\">{props.siteLinkEasy}</h2>\n      </a>\n    </div>\n  );\n}\n\nexport default ProjectCard;\n","import React from \"react\";\nimport LangCard from \"../LangCard/LangCard\";\nimport ProjectCard from \"../ProjectCard/ProjectCard\";\nimport {\n  faHtml5,\n  faCss3,\n  faSass,\n  faNodeJs,\n  faReact,\n  faJsSquare,\n  faSquarespace,\n  faShopify,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport jfImage from \"../../imgs/jfrestoration.png\";\n\nfunction MainContent() {\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"titleContainer\">\n        <h2>Front end web developer residing in Auckland, New Zealand</h2>\n      </div>\n      <h2 className=\"titleText\">Experience in</h2>\n      <div className=\"displayCards\">\n        <LangCard icon={faHtml5} title=\"HTML 5\" />\n        <LangCard icon={faCss3} title=\"CSS3\" />\n        <LangCard icon={faSass} title=\"Sass\" />\n        <LangCard icon={faJsSquare} title=\"JavaScript\" />\n        <LangCard icon={faNodeJs} title=\"Node.js\" />\n        <LangCard icon={faReact} title=\"ReactJs\" />\n        <LangCard icon={faSquarespace} title=\"Squarespace\" />\n        <LangCard icon={faShopify} title=\"Shopify\" />\n      </div>\n      <h2 className=\"titleText\">Current Projects</h2>\n      <div className=\"displayCards\">\n        <ProjectCard\n          img={jfImage}\n          siteLink=\"https://www.jfrestoration.co.nz/\"\n          siteLinkEasy=\"www.jfrestoration.co.nz\"\n        />\n      </div>\n      <div className=\"contactContainer\">\n        <h2 className=\"titleText\">Contact:</h2>\n        <h3>\n          Phone: <a href=\"tel:+064-21-903-800\">021 903 800</a>\n        </h3>\n\n        <h3>\n          Email:{\" \"}\n          <a href=\"mailto: louis.fowler@gmail.com\">louis.fowler@gmail.com</a>\n        </h3>\n      </div>\n    </div>\n  );\n}\n\nexport default MainContent;\n","import React from \"react\";\nimport \"./App.css\";\nimport HeaderComp from \"./components/HeaderComp/HeaderComp\";\nimport FooterComp from \"./components/FooterComp/FooterComp\";\nimport MainContent from \"./components/MainContent/MainContent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HeaderComp />\n      <MainContent />\n      <FooterComp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/jfrestoration.eb825d0a.png\";"],"sourceRoot":""}